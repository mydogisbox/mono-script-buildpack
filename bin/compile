#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# fail fast
set -e

MONO3_VM_BINARY="https://github.com/mydogisbox/mono-builder/releases/download/0.0.10/mono-5.4.1.7.tar.gz"
NUGET_BINARY="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
PAKET_BINARY="https://github.com/fsprojects/Paket/releases/download/5.247.4/paket.exe"

NUGET="${BUILD_DIR}/vendor/mono/bin/nuget.exe"
MOZROOT="${BUILD_DIR}/vendor/mono/lib/mono/4.5/mozroots.exe"
XBUILD="${BUILD_DIR}/vendor/mono/lib/mono/4.5/xbuild.exe"

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $ENV_DIR

echo "-----> Downloading mono to ${CACHE_DIR}/$STACK/vendor"
rm -r ${CACHE_DIR}/$STACK/vendor/mono
if [ ! -d ${CACHE_DIR}/$STACK/vendor/mono ]; then
    mkdir -p ${CACHE_DIR}/$STACK/vendor
    curl -L $MONO3_VM_BINARY -s | tar zxf - -C ${CACHE_DIR}/$STACK/vendor
    curl $NUGET_BINARY -L -o "${CACHE_DIR}/$STACK/vendor/mono/bin/nuget.exe"
    curl $PAKET_BINARY -L -o "${CACHE_DIR}/$STACK/vendor/mono/bin/paket.exe"
fi

mkdir -p ${BUILD_DIR}/vendor

echo "-----> Copying ${CACHE_DIR}/$STACK/vendor/mono to ${BUILD_DIR}/vendor"
cp -pr "${CACHE_DIR}/$STACK/vendor/mono" "${BUILD_DIR}/vendor/"

rm -fr /app/vendor/mono

# Mono expects to be running out of /app
echo "-----> Linking ${BUILD_DIR}/vendor/mono --> /app"
ln -s "${BUILD_DIR}/vendor/mono" /app

cp -p /app/mono/bin/fsharpc /app/mono/bin/fsharpc-heroku
cp -p /app/mono/bin/fsharpi /app/mono/bin/fsharpi-heroku

echo "-----> Setting envvars"
export PATH="/app/mono/bin:$PATH"
export LD_LIBRARY_PATH="/app/mono/lib:$LD_LIBRARY_PATH"
echo "-----> Importing trusted root certificates"
cert-sync --quiet --user /etc/ssl/certs/ca-certificates.crt

# cp -r ~/.config ${BUILD_DIR}/.

cd ${BUILD_DIR}

if [ -f paket.lock ]; then
  echo "-----> paket.lock found, restoring packages with paket"
  mono /app/mono/bin/paket.exe restore
elif [ -f paket.dependencies ]; then
  echo "-----> paket.dependencies found, installing packages with paket"
  mono /app/mono/bin/paket.exe install
fi

if [ -f packages.config -o -f */packages.config ]; then
   echo "-----> packages.config found, installing dependencies with nuget"
   find  -name packages.config | xargs mono $NUGET install -o packages
fi

if [ -f app.fsx ]; then
  echo "-----> Compiling app.fsx"
  mono /app/mono/lib/mono/4.5/fsc.exe app.fsx
elif [ -f *.sln ]; then
   echo "-----> Compiling application"
   mono $XBUILD
elif [ -f $1/build.fsx ]; then
   echo "-----> Compiling fake project"
   mono packages/FAKE/tools/FAKE.exe --fsiargs -d:MONO build.fsx
fi

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
